@node Matrix Elements
@section Matrix elements

The setup of matrix elements is covered by the `(me)' section of
the steering file or the ME data file `ME.dat', respectively.
There are no mandatory settings to be made.

The following parameters are used to steer the matrix element setup.

@menu
* ME_SIGNAL_GENERATOR::     The matrix element generator(s).
* RESULT_DIRECTORY::        The directory to store integration results.
* EVENT_GENERATION_MODE::   The event generation mode.
* SCALES::                  How to compute scales. 
* COUPLING_SCHEME::         Running of SM gauge couplings.
* COUPLINGS::               How to evaluate couplings.
* KFACTOR::                 Whether and how to apply a K-factor.
* YUKAWA_MASSES::           Running of Yukawa couplings.
* Dipole subtraction::      Parameters for calculations with dipole subtraction.
@end menu


@node ME_SIGNAL_GENERATOR
@subsection ME_SIGNAL_GENERATOR
@cindex ME_SIGNAL_GENERATOR
The list of matrix element generators to be employed during the run.
When setting up hard processes from the @option{(processes)} section of the 
input file (see @ref{Processes}), Sherpa calls these generators in order
to check whether either one is capable of generating the corresponding
matrix element. This parameter can also be set on the command line using
option @option{-m}, see @ref{Command line}.

The built-in generators are

@table @option
@item Internal
Simple matrix element library, implementing a variety of 2->2 processes.
@item Amegic
The AMEGIC++ generator published under @mycite{Krauss2001iv}
@item Comix
The @uref{http://comix.freacafe.de,,Comix} generator published under
@mycite{Gleisberg2008fv}
@end table

It is possible to employ an external matrix element generator within Sherpa.
For advice on this topic please contact the authors, @ref{Authors}.


@node RESULT_DIRECTORY
@subsection RESULT_DIRECTORY
@cindex RESULT_DIRECTORY
This parameter specifies the name of the directory
which is used by Sherpa to store integration results
and phasespace mappings. The default is @samp{Results/}.
It can also be set using the command line parameter @option{-r},
see @ref{Command line}. The directory will be created automatically,
unless the option @option{GENERATE_RESULT_DIRECTORY=0} is specified.
Its location is relative to a potentially specified input path,
see @ref{Command line}.


@node EVENT_GENERATION_MODE
@subsection EVENT_GENERATION_MODE
@cindex EVENT_GENERATION_MODE
@cindex OVERWEIGHT_THRESHOLD
This parameter specifies the event generation mode.
It can also be set on the command line
using option @option{-w}, see @ref{Command line}.
The three possible options are:

@table @option
@item Weighted
(shortcut @option{W}) Weighted events.
@item Unweighted
(shortcut @option{U})
Events with constant weight, which have been unweighted
against the maximum determined during phase space integration.
In case of rare events with @code{w > max} the parton level event
is repeated @code{floor(w/max)} times and the remainder is unweighted.
While this leads to unity weights for all events it can be misleading since
the statistical impact of a high-weight event is not accounted for. In the
extreme case this can lead to a high-weight event looking like a significant
bump in distributions (in particular after the effects of the parton shower).
@item PartiallyUnweighted
(shortcut @option{P})
Identical to @option{Unweighted} events, but if the weight exceeds the maximum
determined during the phase space integration, the event will carry a weight
of @code{w/max} to correct for that. This is the recommended option to
generate unweighted events and the default setting in Sherpa.
@end table

For @option{Unweighted} and @option{PartiallyUnweighted} events the user may
set @option{OVERWEIGHT_THRESHOLD=<maxweight>} to cap the maximal over-weight
@code{w/max} taken into account.

@node SCALES
@subsection SCALES
@cindex SCALES
This parameter specifies how to compute the renormalization and
factorization scale and potential additional scales.

@menu
* Scale setters::
* Custom scale implementation::
* Predefined scale tags::
* Scale schemes for NLO calculations::
* Explicit scale variations::
* METS scale setting with multiparton core processes::
@end menu

Sherpa provides several built-in scale setting schemes. For each scheme 
the scales are then set using expressions understood by the @ref{Interpreter}. 
Each scale setter's syntax is 
@verbatim
SCALES <scale-setter>{<scale-definition>}
@end verbatim
to define a single scale for both the factorisation and renormalisation scale. 
They can be set to different values using
@verbatim
SCALES <scale-setter>{<fac-scale-definition>}{<ren-scale-definition>}
@end verbatim

In parton shower matched/merged calculations a third perturbative scale
is present, the resummation or parton shower starting scale. It can be
set by the user in the third argument like
@verbatim
SCALES <scale-setter>{<fac-scale-definition>}{<ren-scale-definition>}{<res-scale-definition>}
@end verbatim
If the final state of your hard scattering process contains QCD partons,
their kinematics fix the resummation scale for subsequent emissions
(cf. the description of the @option{METS} scale setter below).  If
instead you want to specify your own resummation scale also in such a
case, you have to set @code{CSS_RESPECT_Q2=1} and use the third argument
to specify your resummation scale as above.

@b{Note: for all scales their squares have to be given.} See
@ref{Predefined scale tags} for some predefined scale tags.

More than three scales can be set as well to be subsequently used, e.g.
by different couplings, see @ref{COUPLINGS}.



@node Scale setters
@subsubsection Scale setters

The scale setter options which are currently available are
@table @option
@item VAR

The variable scale setter is the simplest scale setter available. Scales
are simply specified by additional parameters in a form which is understood
by the internal interpreter, see @ref{Interpreter}. If, for example the invariant 
mass of the lepton pair in Drell-Yan production is the desired scale,
the corresponding setup reads
@verbatim
SCALES VAR{Abs2(p[2]+p[3])}
@end verbatim
Renormalization and factorization scales can be chosen differently.
For example in Drell-Yan + jet production one could set
@verbatim
SCALES VAR{Abs2(p[2]+p[3])}{MPerp2(p[2]+p[3])}
@end verbatim

@item FASTJET
If @uref{http://www.fastjet.fr,,FastJet} is enabled by including 
@code{--enable-fastjet=/path/to/fastjet} in the @code{configure} options, 
this scale setter can be used to set a scale based on jet-, rather than 
parton-momenta.

The final state parton configuration is first clustered using FastJet and 
resulting jet momenta are then added back to the list of non strongly 
interacting particles. The numbering of momenta therefore stays effectively 
the same as in standard Sherpa, except that final state partons are replaced 
with jets, if applicable (a parton might not pass the jet criteria and get 
"lost"). In particular, the indices of the initial state partons and all EW 
particles are uneffected. Jet momenta can then be accessed as described in 
@ref{Predefined scale tags} through the identifiers @code{p[i]}, 
and the nodal values of the clustering sequence can be used through @code{MU_n2}.
The syntax is

@verbatim
SCALES FASTJET[<jet-algo-parameter>]{<scale-definition>}
@end verbatim

Therein the parameters of the jet algorithm to be used to define the jets 
are given as a comma separated list of 

@itemize
@item the jet algorithm @code{A:kt,antikt,cambridge,siscone} 
      (default @code{antikt})
@item phase space restrictions, i.e. @code{PT:<min-pt>}, @code{ET:<min-et>}, 
      @code{Eta:<max-eta>}, @code{Y:<max-rap>} (otherwise unrestricted)
@item radial parameter @code{R:<rad-param>} (default @code{0.4})
@item f-parameter for Siscone @code{f:<f-param>} (default @code{0.75})
@item recombination scheme @code{C:E,pt,pt2,Et,Et2,BIpt,BIpt2} 
      (default @code{E})
@item b-tagging mode @code{B:0,1,2} (default @code{0})
      This parameter, if specified different from its default 0, allows
      to use b-tagged jets only, based on the parton-level constituents of the jets.
      There are two options: With @code{B:1} both b and anti-b quarks are
      counted equally towards b-jets, while for @code{B:2} they are added with a
      relative sign as constituents, i.e. a jet containing b and anti-b is not tagged.
@item scale setting mode @code{M:0,1} (default @code{1})
      It is possible to specify multiple scale definition blocks, each enclosed
      in curly brackets. The scale setting mode parameter then determines, how
      those are interpreted:
      In the @code{M:0} case, they specify factorisation, renormalisation and
      resummation scale separately in that order.
      In the @code{M:1} case, the @code{n} given scales are used to calculate a
      mean scale such that @code{alpha_s^n(mu_mean)=alpha_s(mu_1)...alpha_s(mu_n)}
      This scale is then used for factorisation, renormalisation and resummation
      scale.
@end itemize

Consider the example of lepton pair production in association with jets. The 
following scale setter 

@verbatim
SCALES FASTJET[A:kt,PT:10,R:0.4,M:0]{sqrt(PPerp2(p[4])*PPerp2(p[5]))}
@end verbatim

reconstructs jets using the kt-algorithm with R=0.4 and a minimum transverse 
momentum of 10 GeV. The scale of all strong couplings is then set to the 
geometric mean of the hardest and second hardest jet. Note @code{M:0}.

Similarly, in processes with multiple strong couplings, their renormalisation 
scales can be set to different values, e.g.

@verbatim
SCALES FASTJET[A:kt,PT:10,R:0.4,M:1]{PPerp2(p[4])}{PPerp2(p[5])}
@end verbatim

sets the scale of one strong coupling to the transverse momentum of the 
hardest jet, and the scale of the second strong coupling to the transverse 
momentum of second hardest jet. Note @code{M:1} in this case.

The additional tags @var{MU_22} .. @var{MU_n2}  (n=2..njet+1), hold the nodal 
values of the jet clustering in descending order.

Please note that currently this type of scale setting can only be done within 
the process block (@ref{Processes}) and not within the (me) section.






@comment @item QCD
@comment The matrix element is clustered onto a core 2->2 configuration using a
@comment k_T-type algorithm with recombination into on-shell partons.
@comment Scales are defined as the minimum of the largest transverse momentum
@comment during clustering and the lowest invariant mass in the core process.

@item METS
The matrix element is clustered onto a core 2->2 configuration using an 
inversion of current parton shower, cf. @ref{SHOWER_GENERATOR}, recombining 
(n+1) particles into n on-shell particles. Their corresponding flavours are 
determined using run-time information from the matrix element generator. 
It defines the three tags @code{MU_F2}, @code{MU_R2} and @code{MU_Q2} 
whose values are assigned through this clustering procedure. While 
@code{MU_F2} and @code{MU_Q2} are defined as the lowest invariant mass or 
negative virtuality in the core process (for core interactions 
which are pure QCD processes scales are set to the maximum transverse 
mass squared of the outgoing particles), @code{MU_R2} is determined using 
this core scale and the individual clustering scales such that
@verbatim
  alpha_s(MU_R2)^{n+k} = alpha_s(core-scale)^k alpha_s(kt_1) ... alpha_s(kt_n)
@end verbatim
where k is the order in strong coupling of the core process and k is 
the number of clusterings, kt_i are the relative transverse momenta 
at each clustering.
The tags @code{MU_F2}, @code{MU_R2} and @code{MU_Q2} can then be used 
on equal footing with the tags of @ref{Predefined scale tags} to define 
the final scale.

@code{METS} is the default scale scheme in Sherpa, since it is employed
for truncated shower merging, see @ref{Multijet merged event generation with Sherpa}, both at 
leading and next-to-leading order. Thus, Sherpa's default is
@verbatim
SCALES METS{MU_F2}{MU_R2}{MU_Q2}
@end verbatim
As the tags @code{MU_F2}, @code{MU_R2} and @code{MU_Q2} are predefined by 
the @code{METS} scale setter, they may be omitted, i.e.
@verbatim
SCALES METS
@end verbatim
leads to an identical scale definition.

The @code{METS} scale setter comes in two variants: @code{STRICT_METS} and 
@code{LOOSE_METS}. While the former employs the exact inverse of the 
parton shower for the clustering procedure, and therefore is rather time 
consuming for multiparton final state, the latter is a simplified version 
and much faster. Giving @code{METS} as the scale setter results in using 
@code{LOOSE_METS} for the integration and @code{STRICT_METS} during event 
generation. Giving either @code{STRICT_METS} or @code{LOOSE_METS} as the 
scale setter results in using the respective one during both integration 
and event generation.

Clusterings onto 2->n (n>2) configurations is possible, see 
@ref{METS scale setting with multiparton core processes}.

This scheme might be subject to 
changes to enable further classes of processes for merging in the 
future and should therefore be seen with care. Integration results 
might change slightly between different Sherpa versions.

Occasionally, users might encounter the warning message
@verbatim
METS_Scale_Setter::CalculateScale(): No CSS history for '<process name>' in <percentage>% of calls. Set \hat{s}.
@end verbatim
As long as the percentage quoted here is not too high, this does not pose
a serious problem. The warning occurs when - based on the current colour
configuration and matrix element information - no suitable clustering is
found by the algorithm. In such cases the scale is set to the invariant mass
of the partonic process.

@end table

@node Custom scale implementation
@subsubsection Custom scale implementation

When the flexibility of the @option{VAR} scale setter above is not sufficient,
it is also possible to implement a completely custom scale scheme within Sherpa
as C++ class plugin. For details please refer to the @ref{Customization}
section.

@node Predefined scale tags
@subsubsection Predefined scale tags

There exist a few predefined tags to facilitate commonly used scale 
choices or easily implement a user defined scale.
@table @option
@item p[n]
Access to the four momentum of the nth particle. The initial state particles 
carry n=0 and n=1, the final state momenta start from n=2. Their ordering 
is determined by Sherpa's internal particle ordering and can be read e.g. 
from the process names displayed at run time. Please note, that when building 
jets out of the final state partons first, e.g. through the @code{FASTJET} 
scale setter, these parton momenta will be replaced by the jet momenta 
ordered in transverse momenta. For example the process u ub -> e- e+ G G 
will have the electron and the positron at positions @code{p[2]} and 
@code{p[3]} and the gluons on postions @code{p[4]} and @code{p[5]}. However, 
when finding jets first, the electrons will still be at @code{p[2]} and 
@code{p[3]} while the harder jet will be at @code{p[4]} and the softer one 
at @code{p[5]}.

@item H_T2
Square of the scalar sum of the transverse momenta of all final state particles.

@item H_TY2(<factor>,<exponent>)
Square of the scalar sum of the transverse momenta of all final state particles 
weighted by their rapidity distance from the final state boost vector. Thus, 
takes the form
@verbatim
  H_T^{(Y)} = sum_i pT_i exp [ fac |y-yboost|^exp ]
@end verbatim
Typical values to use would by @code{0.3} and @code{1}.

@comment @item TAU_B2
@comment Square of the beam thrust.

@item MU_F2, MU_R2, MU_Q2
Tags holding the values of the factorisation, renormalisation scale and 
resummation scale determined through backwards clustering in the 
@code{METS} scale setter.

@item MU_22, MU_32, ..., MU_n2
Tags holding the nodal values of the jet clustering in the @code{FASTJET} 
scale setter, cf. @ref{Scale setters}.
@end table

All of those objects can be operated upon by any operator/function known 
to the @ref{Interpreter}.


@node Scale schemes for NLO calculations
@subsubsection Scale schemes for NLO calculations

For next-to-leading order calculations it must be guaranteed that the scale is 
calculated separately for the real correction and the subtraction terms,
such that within the subtraction procedure the same amount is subtracted
and added back. Starting from version 1.2.2 this is the case for all 
scale setters in Sherpa. Also, the definition of the scale must be 
infrared safe w.r.t. to the radiation of an extra parton. Infrared safe 
(for QCD-NLO calculations) are:

@itemize
@item any function of momenta of NOT strongly interacting particles
@item sum of transverse quantities of all partons (e.g. @code{H_T2})
@item any quantity refering to jets, constructed by an IR safe
jet algorithm, see below.
@end itemize

Not infrared safe are

@itemize
@item any function of momenta of specific partons
@item for processes with hadrons in the initial state: 
any quantity that depends on parton momenta along the beam axis, 
including the initial state partons itself 
@end itemize

Since the total number of partons is different for different pieces
of the NLO calculation any explicit reference to a parton momentum
will lead to an inconsistent result.


@node Explicit scale variations
@subsubsection Explicit scale variations

The factorisation and renormalisation scales in the fixed-order matrix
elements can be varied separately simply by introducing a prefactor into
the scale definition, e.g.
@verbatim
SCALES VAR{0.25*H_T2}{0.25*H_T2}
@end verbatim
for setting both the renormalisation and factorisation scales to H_T/2.

Similarly, the starting scale of the parton shower resummation in a
ME+PS merged sample can be varied using the METS scale setter's third
argument like:
@verbatim
SCALES METS{MU_F2}{MU_R2}{4.0*MU_Q2}
@end verbatim


@node METS scale setting with multiparton core processes
@subsubsection METS scale setting with multiparton core processes
@cindex CORE_SCALE

The METS scale setter stops clustering when no combination
is found that corresponds to a parton shower branching, or if
two subsequent branchings are unordered in terms of the parton shower
evolution parameter. The core scale of the remaining 2->n process then 
needs to be defined. This is done by specifying a core scale through
@verbatim
CORE_SCALE <core-scale-setter>{<core-fac-scale-definition>}{<core-ren-scale-definition>}{<core-res-scale-definition>}
@end verbatim
As always, for scale setters which define @code{MU_F2}, @code{MU_R2} 
and @code{MU_Q2} the scale definition can be dropped. Possible core 
scale setters are
@table @option
@item VAR
Variable core scale setter. Syntax is identical to variable scale setter.
@item QCD
QCD core scale setter. Scales are set to harmonic mean of s, t and u. Only 
useful for 2->2 cores as alternatives to the usual core scale of the METS 
scale setter.
@item TTBar
Core scale setter for processes involving top quarks. Implementation details 
are described in Appendix C of @mycite{Hoeche2013mua}.
@item SingleTop
Core scale setter for single-top production in association with one jet.
If the W is in the t-channel (s-channel), the squared scales are set to the
Mandelstam variables @code{t=2*p[0]*p[2]} (@code{t=2*p[0]*p[1]}).
@end table

@node COUPLING_SCHEME
@subsection COUPLING_SCHEME
@cindex COUPLING_SCHEME

The parameter @code{COUPLING_SCHEME} is used to enable the running of the gauge couplings. The 
default setting is @code{COUPLING_SCHEME=Running_alpha_S}, assuming only the strong coupling 
as running. The QED coupling is considered running as well by setting 
@code{COUPLING_SCHEME=Running}. To solely have a running QED coupling set  
@code{COUPLING_SCHEME=Running_alpha_QED}. If not considered running the values specified by 
@code{ALPHAS(default)} and @code{1/ALPHAQED(default)} are used, respectively. 

@node COUPLINGS
@subsection COUPLINGS
@cindex COUPLINGS
Within Sherpa, strong and electroweak couplings can be computed at any scale 
specified by a scale setter (cf. @ref{SCALES}). The @option{COUPLINGS} tag 
links the argument of a running coupling to one of the respective scales. 
This is better seen in an example. Assuming the following input
@verbatim
SCALES    VAR{...}{PPerp2(p[2])}{Abs2(p[2]+p[3])}
COUPLINGS Alpha_QCD 1, Alpha_QED 2
@end verbatim
Sherpa will compute any strong couplings at scale one, i.e. @samp{PPerp2(p[2])} 
and electroweak couplings at scale two, i.e. @samp{Abs2(p[2]+p[3])}.
Note that counting starts at zero.

@node KFACTOR
@subsection KFACTOR
@cindex KFACTOR
This parameter specifies how to evaluate potential K-factors in the hard
process. This is equivalent to the @option{COUPLINGS} specification of Sherpa
versions prior to 1.2.2. Currently available options are

@table @option
@item NO   
No reweighting
@item VAR
Couplings specified by an additional parameter in a form which is understood
by the internal interpreter, see @ref{Interpreter}. The tags @kbd{Alpha_QCD}
and @kbd{Alpha_QED} serve as links to the built-in running coupling implementation.

If for example the process @samp{g g -> h g} in effective theory is computed,
one could think of evaluating two powers of the strong coupling at the Higgs mass scale 
and one power at the transverse momentum squared of the gluon.
Assuming the Higgs mass to be 120 GeV, the corresponding reweighting would read
@verbatim
SCALES    VAR{...}{PPerp2(p[3])}
COUPLINGS Alpha_QCD 1
KFACTOR   VAR{sqr(Alpha_QCD(sqr(120))/Alpha_QCD(MU_12))}
@end verbatim
As can be seen from this example, scales are referred to as @kbd{MU_<i>2},
where @kbd{<i>} is replaced with the appropriate number. 
Note that counting starts at zero.
@end table

It is possible to implement a dedicated K-factor scheme within Sherpa.
For advice on this topic please contact the authors, @ref{Authors}.
 
@node YUKAWA_MASSES
@subsection YUKAWA_MASSES
@cindex YUKAWA_MASSES

This parameter specifies whether the Yukawa couplings are evaluated using
running or fixed quark masses: @code{YUKAWA_MASSES=Running} is the default since
version 1.2.2 while @code{YUKAWA_MASSES=Fixed} was the default until 1.2.1.

@node Dipole subtraction
@subsection Dipole subtraction
@cindex DIPOLE_ALPHA
@cindex DIPOLE_KAPPA
@cindex DIPOLE_NF_GSPLIT
@cindex DIPOLE_AMIN
This list of parameters can be used to optimize the performance
when employing the Catani-Seymour dipole subtraction 
@mycite{Catani1996vz} as implemented in Amegic @mycite{Gleisberg2007md}.

@table @option
@item `DIPOLE_ALPHA' 
Specifies a dipole cutoff in the nonsingular region @mycite{Nagy2003tz}.
Changing this parameter shifts contributions from the subtracted real 
correction piece (RS) to the piece including integrated dipole terms (I), 
while their sum remains constant. This parameter can be used to optimize
the integration performance of the individual pieces. 
Also the average calculation time for the subtracted real correction
is reduced with smaller choices of `DIPOLE_ALPHA' due to the (on average)
reduced number of contributing dipole terms. For most processes
a reasonable choice is between 0.01 and 1 (default). See also
@ref{Choosing DIPOLE_ALPHA}
@item `DIPOLE_AMIN'
Specifies the cutoff of real correction terms in the infrared reagion
to avoid numerical problems with the subtraction. The default is 1.e-8.
@item `DIPOLE_NF_GSPLIT'
Specifies the number of quark flavours that are produced from 
gluon splittings. This number must be at least the number of massless 
flavours (default). If this number is larger than the number of massless
quarks the massive dipole subtraction @mycite{Catani2002hc} is employed.
@item `DIPOLE_KAPPA'
Specifies the kappa-parameter in the massive dipole subtraction formalism
@mycite{Catani2002hc}.
@end table
